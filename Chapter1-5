<H1>Chhapter 04-Table expressions</H1>

SELECT 
ROW_NUMBER() OVER (PARTITION BY CATEGORYID ORDER BY UNITPRICE, PRODUCTID)AS ROWNUM,
CATEGORYID, PRODUCTID,PRODUCTNAME, UNITPRICE FROM PRODUCTION.PRODUCTS;

SELECT CATEGORYID, PRODUCTID, PRODUCTNAME, UNITPRICE
FROM(SELECT 
ROW_NUMBER( ) OVER (PARTITION BY CATEGORYID ORDER BY UNITPRICE, PRODUCTID)AS ROWNUM, CATEGORYID, PRODUCTID, PRODUCTNAME, UNITPRICE
FROM PRODUCTION.PRODUCTS) AS D
WHERE ROWNUM<=2;


--CTES--
WITH C AS
(
  SELECT 
  ROW_NUMBER() OVER(PARTICITON BY CATEGORYID
                    ORDER BY UNITPRICE, PRODUCTID) AS ROWNUM,
  CATEGORYID, PRODUCTID, PRODUCTNAME, UNITPRICE
  FROM PRODUCTION.PRODUCTS
 )
 SELECT CATEGORYID, PRODUCTID, PRODUCTNAME, UNITPRICE
 FROM C
 WHERE ROWNUM<=2;
 
 --RECURSIVE CTE--
 WITH EMPSCTE AS
 (
    SELECT EMPID, MGRID, FIRSTNAME, LASTNAME, 0 AS DISTANCE
    FROM HR.EMPLOYEES
    WHERE EMPID=9
    
    UNION ALL
    SELECT M.MEMPID, M.MGRID, M.FIRSTNAME, M.LASTNAME, S.DISTANCE +1 AS DISTANCE 
    FROM EMPSCTE AS S 
    JOIN HR.EMPLOYEES AS M
    ON S.MRGIRD=M.EMPID
)
SELECT EMPID, MGRID, FIRSTNAME, LASTNAME,DISTANCE
FROM EMPSCTE;
GO

--VIEWS--
IF OBJECT_ID(N'SALES.RANKEDPRODUCTS',N'V') IS NOT NULL DROP VIEW SALES.RANDEDPRODUCTS;
GO
CREATE VIEW SALES.RANKEDPRODUCTS
AS 
SELECT
  ROW_NUMBER() OVER (PARTITION BY CATEGORYID
                    ORDER BY UNITPRICE, PRODUCTID) AS ROWNUM,
  CATEGORYID, PRODUCTID,PRODUCTNAME, UNITPRICE
  FROM PRODUCTION.PRODUCTS;
  GO
  
 SELECT CATEGORYID, PRODUCTID, PRODUCTNAME, UNITPRICE
 FROM SALES.RANKEDPRODUCTS
 WHERE ROWNUM<=2;
 
 
 


 
